{"version":3,"sources":["app/auth/auth.service.ts"],"names":[],"mappings":"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","file":"auth.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\nimport { AuthConstants } from './auth.constants';\r\nimport { JwtHelper } from 'angular2-jwt';\r\nimport { CONSTANTS, LoggerService, LocalStorage } from '../shared/index';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    /**\r\n     * Authentication service for enterprise dashboard\r\n     */\r\n    constructor(\r\n        private http: Http,\r\n        private localStorage: LocalStorage,\r\n        private jwtHelper: JwtHelper,\r\n        private router: Router,\r\n        private loggerService: LoggerService) { }\r\n\r\n    login(username: string, password: string) {\r\n        let headers = new Headers();\r\n        let tokenUrl = CONSTANTS.ENV.API_BASE + 'auth/token'; // TODO: Need to definitely load from settings\r\n\r\n        let urlEncodedParam =\r\n            'grant_type=' + 'password' +\r\n            '&username=' + username +\r\n            '&password=' + password +\r\n            '&client_id=' + 'GoFetchDevWebApp'; // TODO: We need to load this from either environment or settings somewhere.\r\n\r\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        return this.http.post(tokenUrl, urlEncodedParam, { headers })\r\n            .map((res: Response) => {\r\n                if (res.status < 200 || res.status >= 300) {\r\n                    throw new Error('Response status: ' + res.status);\r\n                }\r\n                return this._extractAndSaveAuthData(res);\r\n            })\r\n            .catch((error: Response) => {\r\n                return this._extractAuthError(error);\r\n            });\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(AuthConstants.AUTH_TOKEN_KEY);\r\n        /**\r\n         * INFO: We don't know at this point what would be the login route\r\n         * of this app. Since we are guarding it by canActivate we can safely\r\n         * expect that navigating to the login route will the do the right thing\r\n         * and move the app to the login page. But we don't yet know that is the\r\n         * proper route. May be at some point we would want it to have a way\r\n         * to know which would be the proper login route for the app\r\n        */\r\n        this.router.navigate(['/login']);\r\n    }\r\n\r\n    private _extractAndSaveAuthData(res: Response) {\r\n        let data = res.json();\r\n        if (!data) {\r\n            throw new Error('Invalid/blank auth data, Fatal Error');\r\n        }\r\n        try {\r\n            let userData = this.jwtHelper.decodeToken(data.access_token);\r\n            /**\r\n             * Making sure the user is allowed to get in. Currently this dashboard\r\n             * is only for enterprise users. This would essentially be extended\r\n             * so the components our aware of User types and can act accordingly.\r\n             **/\r\n            let roleString: String = userData.role;\r\n\r\n            // TODO: Make sure we send out a nice message otherwise\r\n            if (roleString.indexOf('Enterprise') === -1) {\r\n                return false;\r\n            }\r\n\r\n            data.userData = userData;\r\n            this.localStorage.setObject(AuthConstants.AUTH_TOKEN_KEY, data);\r\n        } catch (ex) {\r\n            throw new Error('Fatal error, failed to parse token');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private _extractAuthError(res: Response) {\r\n        let error = res.json();\r\n        let errorMsg = error.error_description || 'Server error';\r\n        this.loggerService.error(errorMsg);\r\n        return Observable.throw(errorMsg);\r\n    }\r\n}\r\n"]}